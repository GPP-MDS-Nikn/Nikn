require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe CareUnitsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # CareUnit. As you add validations to CareUnit, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      district:       "TT",
      category:       "a"*CareUnit::CATEGORY_MIN_LENGTH,
      institution:    "a"*CareUnit::INSTITUTION_MIN_LENGTH,
      description:    "a"*CareUnit::DESCRIPTION_MIN_LENGTH,
      name:           "a"*CareUnit::NAME_MIN_LENGTH,
      address:        "a"*CareUnit::ADDRESS_MIN_LENGTH,
      zip_code:       "12345-123",
      city:           "a"*CareUnit::CITY_MIN_LENGTH,
      phone:          "(12) 3456-7890",
      email:          "test@test.tt",
      site:           "www.test.rsp.ec",
      latitude:       "12.123456789",
      longitude:      "12.123456789"
    }
  }

  let(:invalid_attributes) {
    {
      district:       "TTAS",
      category:       "a"*(CareUnit::CATEGORY_MIN_LENGTH - 1),
      institution:    "a"*(CareUnit::INSTITUTION_MIN_LENGTH - 1),
      description:    "a"*(CareUnit::DESCRIPTION_MIN_LENGTH - 1),
      name:           "a"*(CareUnit::NAME_MIN_LENGTH - 1),
      address:        "a"*(CareUnit::ADDRESS_MIN_LENGTH - 1),
      zip_code:       "124523",
      city:           "a"*(CareUnit::CITY_MIN_LENGTH - 1),
      phone:          "(12 56-7890",
      email:          "test@test",
      latitude:       nil,
      longitude:      nil
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CareUnitsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all care_units as @care_units" do
      care_unit = CareUnit.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:care_units)).to eq([care_unit])
    end
  end

  describe "GET #new" do
    it "assigns a new care_unit as @care_unit" do
      get :new, {}, valid_session
      expect(assigns(:care_unit)).to be_a_new(CareUnit)
    end
  end

  describe "GET #edit" do
    it "assigns the requested care_unit as @care_unit" do
      care_unit = CareUnit.create! valid_attributes
      get :edit, {:id => care_unit.to_param}, valid_session
      expect(assigns(:care_unit)).to eq(care_unit)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new CareUnit" do
        expect {
          post :create, {:care_unit => valid_attributes}, valid_session
        }.to change(CareUnit, :count).by(1)
      end

      it "assigns a newly created care_unit as @care_unit" do
        post :create, {:care_unit => valid_attributes}, valid_session
        expect(assigns(:care_unit)).to be_a(CareUnit)
        expect(assigns(:care_unit)).to be_persisted
      end

      it "redirects to the created care_unit" do
        post :create, {:care_unit => valid_attributes}, valid_session
        expect(response).to redirect_to(CareUnit.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved care_unit as @care_unit" do
        post :create, {:care_unit => invalid_attributes}, valid_session
        expect(assigns(:care_unit)).to be_a_new(CareUnit)
      end

      it "re-renders the 'new' template" do
        post :create, {:care_unit => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {
          district:       "TT",
          category:       "a"*CareUnit::CATEGORY_MIN_LENGTH,
          institution:    "a"*CareUnit::INSTITUTION_MIN_LENGTH,
          description:    "a"*CareUnit::DESCRIPTION_MIN_LENGTH,
          name:           "a"*CareUnit::NAME_MIN_LENGTH,
          address:        "a"*CareUnit::ADDRESS_MIN_LENGTH,
          zip_code:       "12345-123",
          city:           "a"*CareUnit::CITY_MIN_LENGTH,
          phone:          "(12) 3456-7890",
          email:          "test@test.tt",
          site:           "www.test.rsp.ec",
          latitude:       "12.123456789",
          longitude:      "12.123456789"
        }
      }

      it "assigns the requested care_unit as @care_unit" do
        care_unit = CareUnit.create! valid_attributes
        put :update, {:id => care_unit.to_param, :care_unit => valid_attributes}, valid_session
        expect(assigns(:care_unit)).to eq(care_unit)
      end

      it "redirects to the care_unit" do
        care_unit = CareUnit.create! valid_attributes
        put :update, {:id => care_unit.to_param, :care_unit => valid_attributes}, valid_session
        expect(response).to redirect_to(care_units_path)
      end
    end

    context "with invalid params" do
      it "assigns the care_unit as @care_unit" do
        care_unit = CareUnit.create! valid_attributes
        put :update, {:id => care_unit.to_param, :care_unit => invalid_attributes}, valid_session
        expect(assigns(:care_unit)).to eq(care_unit)
      end

      it "re-renders the 'edit' template" do
        care_unit = CareUnit.create! valid_attributes
        put :update, {:id => care_unit.to_param, :care_unit => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested care_unit" do
      care_unit = CareUnit.create! valid_attributes
      expect {
        delete :destroy, {:id => care_unit.to_param}, valid_session
      }.to change(CareUnit, :count).by(-1)
    end

    it "redirects to the care_units list" do
      care_unit = CareUnit.create! valid_attributes
      delete :destroy, {:id => care_unit.to_param}, valid_session
      expect(response).to redirect_to(care_units_url)
    end
  end

end
